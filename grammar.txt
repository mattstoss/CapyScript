program        → declaration* EOF

declaration    → varDecl
               | funcDecl
               | classDecl
               | statement

varDecl        → "let" IDENTIFIER = expression
funcDecl        → "fn" IDENTIFIER "(" parameters? ")" block
classDecl      → "class" IDENTIFIER "{" function_decl* "}"

statement      → printStmt
               | returnStmt
returnStmt     → "return" expression
block          → "{" declaration* "}"

parameters     → IDENTIFIER ( "," IDENTIFIER )*

printStmt      → "print" expression

expression     → assignment
assignment     → ( call "." )? IDENTIFIER "=" assignment
               | call ;
call           → primary ( "(" ")" | "." IDENTIFIER )*
primary        → STRING
               | IDENTIFIER